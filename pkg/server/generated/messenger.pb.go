// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: protos/messenger.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusUpdate_Status int32

const (
	StatusUpdate_UNKNOWN StatusUpdate_Status = 0
	StatusUpdate_ONLINE  StatusUpdate_Status = 1
	StatusUpdate_OFFLINE StatusUpdate_Status = 2
	StatusUpdate_AWAY    StatusUpdate_Status = 3
)

// Enum value maps for StatusUpdate_Status.
var (
	StatusUpdate_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "ONLINE",
		2: "OFFLINE",
		3: "AWAY",
	}
	StatusUpdate_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"ONLINE":  1,
		"OFFLINE": 2,
		"AWAY":    3,
	}
)

func (x StatusUpdate_Status) Enum() *StatusUpdate_Status {
	p := new(StatusUpdate_Status)
	*p = x
	return p
}

func (x StatusUpdate_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusUpdate_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_messenger_proto_enumTypes[0].Descriptor()
}

func (StatusUpdate_Status) Type() protoreflect.EnumType {
	return &file_protos_messenger_proto_enumTypes[0]
}

func (x StatusUpdate_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusUpdate_Status.Descriptor instead.
func (StatusUpdate_Status) EnumDescriptor() ([]byte, []int) {
	return file_protos_messenger_proto_rawDescGZIP(), []int{3, 0}
}

// Represents a user/peer in the network
type Peer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_protos_messenger_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_messenger_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_protos_messenger_proto_rawDescGZIP(), []int{0}
}

func (x *Peer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Peer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// A chat message from one peer to another
type ChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Sender        *Peer  `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver      *Peer  `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Content       string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_protos_messenger_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_messenger_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_protos_messenger_proto_rawDescGZIP(), []int{1}
}

func (x *ChatMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChatMessage) GetSender() *Peer {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *ChatMessage) GetReceiver() *Peer {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *ChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message acknowledgment
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Receiver      *Peer  `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Timestamp     int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_protos_messenger_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_protos_messenger_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_protos_messenger_proto_rawDescGZIP(), []int{2}
}

func (x *Ack) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Ack) GetReceiver() *Peer {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *Ack) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Status updates: online, offline, away, etc.
type StatusUpdate struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Peer      *Peer                  `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Status    StatusUpdate_Status    `protobuf:"varint,2,opt,name=status,proto3,enum=whisperserver.StatusUpdate_Status" json:"status,omitempty"`
	Timestamp int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	mi := &file_protos_messenger_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_protos_messenger_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_protos_messenger_proto_rawDescGZIP(), []int{3}
}

func (x *StatusUpdate) GetPeer() *Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *StatusUpdate) GetStatus() StatusUpdate_Status {
	if x != nil {
		return x.Status
	}
	return StatusUpdate_UNKNOWN
}

func (x *StatusUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// A wrapper for all types of messages sent in the stream
type Envelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*Envelope_ChatMessage
	//	*Envelope_Ack
	//	*Envelope_StatusUpdate
	Payload       isEnvelope_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_protos_messenger_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_protos_messenger_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_protos_messenger_proto_rawDescGZIP(), []int{4}
}

func (x *Envelope) GetPayload() isEnvelope_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Envelope) GetChatMessage() *ChatMessage {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_ChatMessage); ok {
			return x.ChatMessage
		}
	}
	return nil
}

func (x *Envelope) GetAck() *Ack {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *Envelope) GetStatusUpdate() *StatusUpdate {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_StatusUpdate); ok {
			return x.StatusUpdate
		}
	}
	return nil
}

type isEnvelope_Payload interface {
	isEnvelope_Payload()
}

type Envelope_ChatMessage struct {
	ChatMessage *ChatMessage `protobuf:"bytes,1,opt,name=chat_message,json=chatMessage,proto3,oneof"`
}

type Envelope_Ack struct {
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type Envelope_StatusUpdate struct {
	StatusUpdate *StatusUpdate `protobuf:"bytes,3,opt,name=status_update,json=statusUpdate,proto3,oneof"`
}

func (*Envelope_ChatMessage) isEnvelope_Payload() {}

func (*Envelope_Ack) isEnvelope_Payload() {}

func (*Envelope_StatusUpdate) isEnvelope_Payload() {}

// Empty request/response message
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_protos_messenger_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protos_messenger_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protos_messenger_proto_rawDescGZIP(), []int{5}
}

var File_protos_messenger_proto protoreflect.FileDescriptor

const file_protos_messenger_proto_rawDesc = "" +
	"\n" +
	"\x16protos/messenger.proto\x12\rwhisperserver\"2\n" +
	"\x04Peer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\"\xc2\x01\n" +
	"\vChatMessage\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12+\n" +
	"\x06sender\x18\x02 \x01(\v2\x13.whisperserver.PeerR\x06sender\x12/\n" +
	"\breceiver\x18\x03 \x01(\v2\x13.whisperserver.PeerR\breceiver\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\"s\n" +
	"\x03Ack\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12/\n" +
	"\breceiver\x18\x02 \x01(\v2\x13.whisperserver.PeerR\breceiver\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"\xcb\x01\n" +
	"\fStatusUpdate\x12'\n" +
	"\x04peer\x18\x01 \x01(\v2\x13.whisperserver.PeerR\x04peer\x12:\n" +
	"\x06status\x18\x02 \x01(\x0e2\".whisperserver.StatusUpdate.StatusR\x06status\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"8\n" +
	"\x06Status\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06ONLINE\x10\x01\x12\v\n" +
	"\aOFFLINE\x10\x02\x12\b\n" +
	"\x04AWAY\x10\x03\"\xc2\x01\n" +
	"\bEnvelope\x12?\n" +
	"\fchat_message\x18\x01 \x01(\v2\x1a.whisperserver.ChatMessageH\x00R\vchatMessage\x12&\n" +
	"\x03ack\x18\x02 \x01(\v2\x12.whisperserver.AckH\x00R\x03ack\x12B\n" +
	"\rstatus_update\x18\x03 \x01(\v2\x1b.whisperserver.StatusUpdateH\x00R\fstatusUpdateB\t\n" +
	"\apayload\"\a\n" +
	"\x05Empty2\x85\x02\n" +
	"\tMessenger\x12<\n" +
	"\x04Chat\x12\x17.whisperserver.Envelope\x1a\x17.whisperserver.Envelope(\x010\x01\x12=\n" +
	"\vSendMessage\x12\x1a.whisperserver.ChatMessage\x1a\x12.whisperserver.Ack\x12A\n" +
	"\fUpdateStatus\x12\x1b.whisperserver.StatusUpdate\x1a\x14.whisperserver.Empty\x128\n" +
	"\x04Ping\x12\x13.whisperserver.Peer\x1a\x1b.whisperserver.StatusUpdateB*Z(github.com/ch55secake/whisper/pkg/serverb\x06proto3"

var (
	file_protos_messenger_proto_rawDescOnce sync.Once
	file_protos_messenger_proto_rawDescData []byte
)

func file_protos_messenger_proto_rawDescGZIP() []byte {
	file_protos_messenger_proto_rawDescOnce.Do(func() {
		file_protos_messenger_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protos_messenger_proto_rawDesc), len(file_protos_messenger_proto_rawDesc)))
	})
	return file_protos_messenger_proto_rawDescData
}

var file_protos_messenger_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_messenger_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protos_messenger_proto_goTypes = []any{
	(StatusUpdate_Status)(0), // 0: whisperserver.StatusUpdate.Status
	(*Peer)(nil),             // 1: whisperserver.Peer
	(*ChatMessage)(nil),      // 2: whisperserver.ChatMessage
	(*Ack)(nil),              // 3: whisperserver.Ack
	(*StatusUpdate)(nil),     // 4: whisperserver.StatusUpdate
	(*Envelope)(nil),         // 5: whisperserver.Envelope
	(*Empty)(nil),            // 6: whisperserver.Empty
}
var file_protos_messenger_proto_depIdxs = []int32{
	1,  // 0: whisperserver.ChatMessage.sender:type_name -> whisperserver.Peer
	1,  // 1: whisperserver.ChatMessage.receiver:type_name -> whisperserver.Peer
	1,  // 2: whisperserver.Ack.receiver:type_name -> whisperserver.Peer
	1,  // 3: whisperserver.StatusUpdate.peer:type_name -> whisperserver.Peer
	0,  // 4: whisperserver.StatusUpdate.status:type_name -> whisperserver.StatusUpdate.Status
	2,  // 5: whisperserver.Envelope.chat_message:type_name -> whisperserver.ChatMessage
	3,  // 6: whisperserver.Envelope.ack:type_name -> whisperserver.Ack
	4,  // 7: whisperserver.Envelope.status_update:type_name -> whisperserver.StatusUpdate
	5,  // 8: whisperserver.Messenger.Chat:input_type -> whisperserver.Envelope
	2,  // 9: whisperserver.Messenger.SendMessage:input_type -> whisperserver.ChatMessage
	4,  // 10: whisperserver.Messenger.UpdateStatus:input_type -> whisperserver.StatusUpdate
	1,  // 11: whisperserver.Messenger.Ping:input_type -> whisperserver.Peer
	5,  // 12: whisperserver.Messenger.Chat:output_type -> whisperserver.Envelope
	3,  // 13: whisperserver.Messenger.SendMessage:output_type -> whisperserver.Ack
	6,  // 14: whisperserver.Messenger.UpdateStatus:output_type -> whisperserver.Empty
	4,  // 15: whisperserver.Messenger.Ping:output_type -> whisperserver.StatusUpdate
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_protos_messenger_proto_init() }
func file_protos_messenger_proto_init() {
	if File_protos_messenger_proto != nil {
		return
	}
	file_protos_messenger_proto_msgTypes[4].OneofWrappers = []any{
		(*Envelope_ChatMessage)(nil),
		(*Envelope_Ack)(nil),
		(*Envelope_StatusUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protos_messenger_proto_rawDesc), len(file_protos_messenger_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_messenger_proto_goTypes,
		DependencyIndexes: file_protos_messenger_proto_depIdxs,
		EnumInfos:         file_protos_messenger_proto_enumTypes,
		MessageInfos:      file_protos_messenger_proto_msgTypes,
	}.Build()
	File_protos_messenger_proto = out.File
	file_protos_messenger_proto_goTypes = nil
	file_protos_messenger_proto_depIdxs = nil
}
